// The Computer Language Benchmarks Game
// https://salsa.debian.org/benchmarksgame-team/benchmarksgame/
//

var PI = 3.14159265358979323
var SOLAR_MASS = 4 * PI * PI
var DAYS_PER_YEAR = 365.24

class Body {
  init(x, y, z, vx, vy, vz, mass) {
    self.x = x
    self.y = y 
    self.z = z    
    self.vx = vx
    self.vy = vy 
    self.vz = vz  
    self.mass = mass   
  }
}

fn offset_momentum(bodies) {
  var px=0, py=0, pz=0

  for (b in bodies) {
    px += b.vx * b.mass
    py += b.vy * b.mass
    pz += b.vz * b.mass
  }
    
  var b = bodies[0]
  b.vx = - px / SOLAR_MASS
  b.vy = - py / SOLAR_MASS
  b.vz = - pz / SOLAR_MASS
}
        
fn energy(bodies) {
  var e = 0.0  
  var num_bodies = bodies.count() 
  for (i in 0...num_bodies) {  
    var b = bodies[i]
    var sq = b.vx * b.vx + b.vy * b.vy + b.vz * b.vz  
    e += 0.5 * bodies[i].mass * sq
    for (j in i+1...num_bodies) {
      var dx = b.x - bodies[j].x 
      var dy = b.y - bodies[j].y 
      var dz = b.z - bodies[j].z   
      sq = dx * dx + dy * dy + dz * dz 
      e -= (b.mass * bodies[j].mass) / sqrt(sq)   
    }
  }
  return e   
} 
    
fn advance(bodies, dt) {
  var num_bodies = bodies.count()
  for (i in 0...num_bodies) {
    for (j in i+1...num_bodies) {
      var dx = bodies[i].x - bodies[j].x 
      var dy = bodies[i].y - bodies[j].y 
      var dz = bodies[i].z - bodies[j].z       
      var dpos_norm_sq = dx^2 + dy^2 + dz^2  
      var mag = dt / (dpos_norm_sq * sqrt(dpos_norm_sq)) 
      
      var mj = bodies[j].mass * mag
      bodies[i].vx -= dx * mj  
      bodies[i].vy -= dy * mj   
      bodies[i].vz -= dz * mj 
      
      var mi = bodies[i].mass * mag      
      bodies[j].vx += dx * mi  
      bodies[j].vy += dy * mi   
      bodies[j].vz += dz * mi    
    }           
  }

  for (i in 0...num_bodies) {
    bodies[i].x += bodies[i].vx * dt  
    bodies[i].y += bodies[i].vy * dt   
    bodies[i].z += bodies[i].vz * dt  
  }
}
   
fn nbody(n) {
  var bodies = [
    // sun
    Body(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, SOLAR_MASS),
    
    // jupiter
    Body(
      4.84143144246472090e+00,
      -1.16032004402742839e+00,
      -1.03622044471123109e-01,
      1.66007664274403694e-03 * DAYS_PER_YEAR,
      7.69901118419740425e-03 * DAYS_PER_YEAR,
      -6.90460016972063023e-05 * DAYS_PER_YEAR,
      9.54791938424326609e-04 * SOLAR_MASS
      ),
    
    // saturn
    Body(
      8.34336671824457987e+00,
      4.12479856412430479e+00,
      -4.03523417114321381e-01,      
      -2.76742510726862411e-03 * DAYS_PER_YEAR,
      4.99852801234917238e-03 * DAYS_PER_YEAR,
      2.30417297573763929e-05 * DAYS_PER_YEAR,
      2.85885980666130812e-04 * SOLAR_MASS 
      ),    
    
    // uranus
    Body(
      1.28943695621391310e+01,
      -1.51111514016986312e+01,
      -2.23307578892655734e-01,
      2.96460137564761618e-03 * DAYS_PER_YEAR,
      2.37847173959480950e-03 * DAYS_PER_YEAR,
      -2.96589568540237556e-05 * DAYS_PER_YEAR,
      4.36624404335156298e-05 * SOLAR_MASS 
      ),    
    
    // neptune
    Body(
      1.53796971148509165e+01,
      -2.59193146099879641e+01,
      1.79258772950371181e-01,    
      2.68067772490389322e-03 * DAYS_PER_YEAR,
      1.62824170038242295e-03 * DAYS_PER_YEAR,
      -9.51592254519715870e-05 * DAYS_PER_YEAR,
      5.15138902046611451e-05 * SOLAR_MASS 
      )
    ]    
   
  offset_momentum(bodies)   
  print energy(bodies).format("%.9f")
  for (i in 1..n) {
    advance(bodies, 0.01)
  }
  print energy(bodies).format("%.9f")
}

var N = 100 
var args = System.arguments()
if (args.count()>0) N=Int(args[0])

nbody(N)

